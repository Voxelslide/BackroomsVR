%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: MaybeFractal
  m_EditorClassIdentifier: 
  shaderName: MaybeFractal
  shaderReference: {fileID: 4800000, guid: 9025c9ddcaa1ca94491ba0d4d6d71446, type: 3}
  shaderTemplate: uRaymarching/Forward/Standard
  variables:
  - key: Name
    value: MaybeFractal
  - key: LOD
    value: 200
  - key: LightModel
    value: Standard
  - key: Option
    value: 
  - key: SurfaceFunctionInput
    value: SurfaceOutputStandard
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  - key: ObjectShape
    value: CUBE
  - key: RaymarchingShaderDirectory
    value: Packages/com.hecomi.uraymarching/Runtime/Shaders/Include/Legacy
  conditions:
  - key: UseTesselation
    value: 0
  - key: Blend
    value: 0
  - key: ShadowCaster
    value: 1
  - key: FullScreen
    value: 0
  - key: WorldSpace
    value: 0
  - key: FollowObjectScale
    value: 1
  - key: CameraInsideObject
    value: 0
  - key: UseRaymarchingDepth
    value: 1
  - key: UseCameraDepthTexture
    value: 1
  - key: DisableViewCulling
    value: 0
  - key: SphericalHarmonicsPerPixel
    value: 1
  - key: UseGrabPass
    value: 0
  - key: ForwardAdd
    value: 1
  - key: FallbackToStandardShader
    value: 1
  blocks:
  - key: SurfaceFunction
    value: "fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;\r\no.Albedo = c.rgb;\r\no.Metallic
      = _Metallic;\r\no.Smoothness = _Glossiness;\r\no.Alpha = c.a;\r\no.Normal =
      UnpackNormal(tex2D(_NormalTex, IN.uv_MainTex));\r"
    folded: 0
  - key: Properties
    value: _Color2("Color2", Color) = (1.0, 1.0, 1.0, 1.0)
    folded: 1
  - key: DistanceFunction
    value: "int Iterations = 50;\nfloat Scale = 10;\nfloat foldingLimit = 20;\nfloat
      r = 10;\nfloat minRadius2 = 5;\nfloat fixedRadius2 = 10;\n\nvoid boxFold(inout
      float3 z, inout float dz) {\n\tz = clamp(z, -foldingLimit, foldingLimit) *
      2.0 - z;\n}\n\nvoid sphereFold(inout float3 z, inout float dz) {\n\tfloat r2
      = dot(z,z);\n\tif (r<minRadius2) { \n\t\t// linear inner scaling\n\t\tfloat
      temp = (fixedRadius2/minRadius2);\n\t\tz *= temp;\n\t\tdz*= temp;\n\t} else
      if (r2<fixedRadius2) { \n\t\t// this is the actual sphere inversion\n\t\tfloat
      temp =(fixedRadius2/r2);\n\t\tz *= temp;\n\t\tdz*= temp;\n\t}\n}\n\ninline
      float DistanceFunction(float3 pos)\n{\n\tfloat3 offset = pos;\n\tfloat dr =
      1.0;\n\tfor (int n = 0; n < Iterations; n++) {\n\t\tboxFold(pos,dr);      
      // Reflect\n\t\tsphereFold(pos,dr);    // Sphere Inversion\n\t}\n               
      pos=Scale*pos + offset;  // Scale & Translate\n                dr = dr*abs(Scale)+1.0;\n\tfloat
      r = length(pos);\n\treturn r/abs(dr);\n}"
    folded: 1
  - key: PostEffect
    value: 'inline void PostEffect(RaymarchInfo ray, inout PostEffectOutput o)

      {

      }'
    folded: 0
  constants: {fileID: 11400000, guid: 9c8b2f5a7a56c4e21bee7ca4ccfc6640, type: 2}
  basicFolded: 1
  conditionsFolded: 1
  variablesFolded: 1
  materialsFolded: 0
  constantsFolded: 1
